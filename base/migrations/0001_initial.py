# Generated by Django 5.1.4 on 2025-01-11 23:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Jurusan',
            fields=[
                ('NamaJurusan', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('KepalaJurusan', models.CharField(max_length=100)),
                ('TerdaftarTanggal', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Jurusan',
                'verbose_name_plural': 'Jurusan',
            },
        ),
        migrations.CreateModel(
            name='Ruang',
            fields=[
                ('Ruang', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('TerdaftarTanggal', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Guru',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('NamaAwal', models.CharField(max_length=100, null=True)),
                ('NamaTengah', models.CharField(max_length=100, null=True)),
                ('NamaAkhir', models.CharField(max_length=100, null=True)),
                ('TerdaftarTanggal', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('Jurusan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.jurusan')),
            ],
            options={
                'verbose_name': 'Guru',
                'verbose_name_plural': 'Guru',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JadwalMain',
            fields=[
                ('TahunPelajaran', models.CharField(max_length=9)),
                ('Kelas', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('Semester', models.CharField(max_length=100)),
                ('TerdaftarTanggal', models.DateTimeField(auto_now_add=True)),
                ('Jurusan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.jurusan')),
            ],
        ),
        migrations.CreateModel(
            name='NamaMapel',
            fields=[
                ('Mapel', models.CharField(max_length=5)),
                ('KodeMapel', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('TerdaftarTanggal', models.DateTimeField(auto_now_add=True)),
                ('DeskripsiMapel', models.CharField(max_length=200)),
            ],
            options={
                'unique_together': {('Mapel', 'KodeMapel')},
            },
        ),
        migrations.CreateModel(
            name='Jadwal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('WaktuMulai', models.TimeField()),
                ('WaktuSelesai', models.TimeField()),
                ('Hari', models.CharField(choices=[('Senin', 'Senin'), ('Selasa', 'Selasa'), ('Rabu', 'Rabu'), ('Kamis', 'Kamis'), ('Jumat', 'Jumat'), ('Sabtu', 'Sabtu')], max_length=100)),
                ('TerdaftarTanggal', models.DateTimeField(auto_now_add=True)),
                ('TipeSesi', models.CharField(choices=[('Materi', 'Materi'), ('Praktek', 'Praktek'), ('Ujian', 'Ujian'), ('Diskusi', 'Diskusi'), ('Presentasi', 'Presentasi')], max_length=100)),
                ('Guru', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('Kelas', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.jadwalmain')),
                ('NamaMapel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.namamapel')),
                ('Ruang', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.ruang')),
            ],
        ),
    ]
